(function() {var implementors = {};
implementors["ducky_follower"] = [{"text":"impl Freeze for Args","synthetic":true,"types":[]}];
implementors["hamilton"] = [{"text":"impl Freeze for HamiltonLssDriver","synthetic":true,"types":[]},{"text":"impl Freeze for MotorConfig","synthetic":true,"types":[]},{"text":"impl Freeze for BodyConfig","synthetic":true,"types":[]},{"text":"impl Freeze for WireMoveCommand","synthetic":true,"types":[]},{"text":"impl Freeze for MotorCommand","synthetic":true,"types":[]},{"text":"impl Freeze for HolonomicWheelCommand","synthetic":true,"types":[]},{"text":"impl Freeze for TrackedObjects","synthetic":true,"types":[]},{"text":"impl Freeze for VrDeviceClass","synthetic":true,"types":[]},{"text":"impl Freeze for VrDevice","synthetic":true,"types":[]},{"text":"impl Freeze for InputsState","synthetic":true,"types":[]},{"text":"impl Freeze for Map","synthetic":true,"types":[]},{"text":"impl Freeze for Pose","synthetic":true,"types":[]},{"text":"impl Freeze for NavigationController","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LatestSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LatestReceiver&lt;T&gt;","synthetic":true,"types":[]}];
implementors["hamilton_controller"] = [{"text":"impl&lt;T&gt; Freeze for HamiltonRemoteClient&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HamiltonRemoteServer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for _Inner&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MoveCommand","synthetic":true,"types":[]},{"text":"impl Freeze for MoveRequest","synthetic":true,"types":[]},{"text":"impl Freeze for MoveResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HamiltonRemoteController","synthetic":true,"types":[]},{"text":"impl Freeze for Args","synthetic":true,"types":[]}];
implementors["hamilton_guppy_controller"] = [{"text":"impl&lt;T&gt; Freeze for HamiltonRemoteClient&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HamiltonRemoteServer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for _Inner&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MoveCommand","synthetic":true,"types":[]},{"text":"impl Freeze for MoveRequest","synthetic":true,"types":[]},{"text":"impl Freeze for MoveResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HamiltonRemoteController","synthetic":true,"types":[]},{"text":"impl Freeze for Args","synthetic":true,"types":[]}];
implementors["hamilton_web_controller"] = [{"text":"impl Freeze for Args","synthetic":true,"types":[]}];
implementors["localization_receiver"] = [{"text":"impl Freeze for Args","synthetic":true,"types":[]}];
implementors["vehicle_config_test"] = [{"text":"impl Freeze for Args","synthetic":true,"types":[]},{"text":"impl Freeze for MoveCommand","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()